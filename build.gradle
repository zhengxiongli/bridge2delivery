plugins {
    id 'org.springframework.boot' version '2.2.4.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id 'checkstyle'
    id 'jacoco'
}

group = 'com.thoughtworks'
version = '2.0.0'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

apply plugin: 'checkstyle'
apply plugin: 'jacoco'

checkstyle {
    configProperties.projectDir = projectDir
    checkstyleMain.configFile = file("${rootProject.projectDir}/config/checkstyle/checkstyle-main.xml")
    configProperties.checkstyleSuppressionsPath = file("${rootProject.projectDir}/config/checkstyle/supperssions.xml")
    sourceSets = [sourceSets.main]
    toolVersion = 6.7
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "Hoxton.SR1")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation "io.springfox:springfox-swagger2:2.9.2"
    implementation "io.springfox:springfox-swagger-ui:2.9.2"
    compile group: 'org.xhtmlrenderer', name: 'core-renderer', version: 'R8'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    compile group: 'com.apple', name: 'AppleJavaExtensions', version: '1.4'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    compile('io.cucumber:cucumber-java8:5.5.0')
    compile('io.cucumber:cucumber-spring:5.5.0')
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

task installGitHooks(type: Copy) {
    from new File(rootProject.rootDir, 'pre-commit')
    into {
        new File(rootProject.rootDir, '.git/hooks')
    }

    fileMode 0755
}

build.dependsOn installGitHooks

test {
    useJUnitPlatform()
    testLogging {
        events "failed"
    }
    afterSuite { desc, result ->
        if (!desc.parent) {
            logger.quiet "Test Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
        }
    }
}

defaultTasks 'build'
